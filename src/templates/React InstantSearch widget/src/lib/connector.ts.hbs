import type {
  ConnectedComponentClass,
  ConnectorProvided,
} from 'react-instantsearch-core';

import { createConnector } from 'react-instantsearch-dom';

type Connector<TProvided = {}, TExposed = {}> = ((
  stateless: React.FunctionComponent<ConnectorProvided<TProvided>>
) => React.ComponentClass<TExposed>) &
  (<TProps extends Partial<ConnectorProvided<TProvided>>>(
    Composed: React.ComponentType<TProps>
  ) => ConnectedComponentClass<TProps, ConnectorProvided<TProvided>, TExposed>);

export type ProvidedProps = {
  // TODO: fill props that are returned by `getProvidedProps`
}

export const connect{{ pascalCaseName }}: Connector<ProvidedProps> = createConnector<ProvidedProps>({
  displayName: '{{ pascalCaseName }}',
  // @ts-expect-error
  $$type: '{{ organization }}.{{ name }}',

  getProvidedProps(props, searchState, searchResults) {
    return {
      // TODO: return a props for the component
    };
  },

  refine(props, searchState, nextRefinement) {
    return {
      // TODO: return a next searchState
    };
  },

  cleanUp(props, searchState) {
    return {
      // TODO: return a searchState where this widget is removed from the widget tree
    };
  },

  getSearchParameters(searchParameters, props, searchState) {
    // TODO: update and return the searchParameters
    return searchParameters;
  },
});
